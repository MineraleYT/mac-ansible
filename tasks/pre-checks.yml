---
# Verify sudo access and admin privileges
- name: Check sudo access
  raw: sudo true
  register: sudo_check
  changed_when: false
  become: true

- name: Verify sudo access
  assert:
    that: sudo_check.rc == 0
    msg: "Sudo access is required for installation. Please ensure {{ ansible_user }} has sudo privileges."

- name: Check if user is admin
  raw: dscl . read /Groups/admin GroupMembership | grep -w {{ ansible_user }}
  register: admin_check
  ignore_errors: true
  changed_when: false

- name: Add user to admin group
  raw: |
    dseditgroup -o edit -a {{ ansible_user }} -t user admin
    echo "{{ ansible_user }} ALL=(ALL) ALL" | sudo tee /etc/sudoers.d/{{ ansible_user }}
    chmod 0440 /etc/sudoers.d/{{ ansible_user }}
  become: true
  when: admin_check.rc != 0

# Install Xcode Command Line Tools
- name: Check if Xcode Command Line Tools are installed
  raw: xcode-select -p
  register: xcode_select
  ignore_errors: true
  changed_when: false

- name: Install Xcode Command Line Tools
  raw: |
    # Create the placeholder file that's checked by CLI updates' .dist code
    touch /tmp/.com.apple.dt.CommandLineTools.installondemand.in-progress

    # Find the CLI Tools update
    PROD=$(softwareupdate -l | grep "\*.*Command Line" | tail -n 1 | sed 's/^[^C]* //')

    # Install it
    softwareupdate -i "$PROD" --verbose --agree-to-license --no-scan

    # Remove the placeholder
    rm /tmp/.com.apple.dt.CommandLineTools.installondemand.in-progress
  args:
    executable: /bin/bash
  become: true
  when: xcode_select.rc != 0

# System Requirements Check
- name: Check macOS version
  command: sw_vers -productVersion
  register: macos_version
  changed_when: false

- name: Verify minimum macOS version
  assert:
    that: macos_version.stdout is version('11.0', '>=')
    msg: "macOS 11.0 or higher is required"

- name: Get available disk space
  raw: df -h / | grep "/" | awk '{print $4}'
  register: available_space
  changed_when: false

- name: Show available disk space
  debug:
    msg: "Available disk space: {{ available_space.stdout }}"

- name: Verify minimum disk space (10GB)
  assert:
    that: available_space.stdout | regex_replace('Gi|G','') | float >= 10.0
    msg: "At least 10GB of free disk space is required. Current available space: {{ available_space.stdout }}"

# Python Check
- name: Check if Python is installed
  raw: command -v python3
  register: python_check
  ignore_errors: true
  changed_when: false

- name: Install Python if not present
  raw: |
    if ! command -v python3 &> /dev/null; then
      if command -v brew &> /dev/null; then
        brew install python3
      else
        echo "Please install Python3 manually or install Homebrew first"
        exit 1
      fi
    fi
  when: python_check.rc != 0

# Homebrew Check and Installation
- name: Check if Homebrew is installed
  raw: |
    if [ -f /opt/homebrew/bin/brew ]; then
      echo "Homebrew found in /opt/homebrew"
      exit 0
    elif [ -f /usr/local/bin/brew ]; then
      echo "Homebrew found in /usr/local"
      exit 0
    else
      echo "Homebrew not found"
      exit 1
    fi
  register: brew_check
  ignore_errors: true
  changed_when: false

- name: Create Homebrew installation script
  copy:
    dest: /tmp/install_homebrew.sh
    mode: '0755'
    content: |
      #!/bin/bash
      CI=1 NONINTERACTIVE=1 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
      if [ -d "/opt/homebrew" ]; then
        echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> ~/.zprofile
        eval "$(/opt/homebrew/bin/brew shellenv)"
      fi
  when: brew_check.rc != 0

- name: Install Homebrew
  raw: sudo -u {{ ansible_user }} /tmp/install_homebrew.sh
  become: true
  when: brew_check.rc != 0

- name: Remove installation script
  file:
    path: /tmp/install_homebrew.sh
    state: absent
  when: brew_check.rc != 0

- name: Set Homebrew permissions
  file:
    path: /opt/homebrew
    state: directory
    owner: "{{ ansible_user }}"
    group: admin
    recurse: yes
  become: true
  when: brew_check.rc != 0

# Update Homebrew
- name: Update Homebrew
  homebrew:
    update_homebrew: yes
    upgrade_all: yes
    state: present
  register: brew_update
  retries: 3
  delay: 5
  until: brew_update is success
